#version 450

const vec3 vertices[] = {
    // ront ace
    vec3(-2000.0, -2000.0,  2000.0),
    vec3( 2000.0, -2000.0,  2000.0),
    vec3( 2000.0,  2000.0,  2000.0),
    vec3(-2000.0, -2000.0,  2000.0),
    vec3( 2000.0,  2000.0,  2000.0),
    vec3(-2000.0,  2000.0,  2000.0),

    // Right ace
    vec3( 2000.0, -2000.0,  2000.0),
    vec3( 2000.0, -2000.0, -2000.0),
    vec3( 2000.0,  2000.0, -2000.0),
    vec3( 2000.0, -2000.0,  2000.0),
    vec3( 2000.0,  2000.0, -2000.0),
    vec3( 2000.0,  2000.0,  2000.0),

    // Back ace
    vec3(-2000.0, -2000.0, -2000.0),
    vec3( 2000.0, -2000.0, -2000.0),
    vec3( 2000.0,  2000.0, -2000.0),
    vec3(-2000.0, -2000.0, -2000.0),
    vec3( 2000.0,  2000.0, -2000.0),
    vec3(-2000.0,  2000.0, -2000.0),

    // Let ace
    vec3(-2000.0, -2000.0,  2000.0),
    vec3(-2000.0, -2000.0, -2000.0),
    vec3(-2000.0,  2000.0, -2000.0),
    vec3(-2000.0, -2000.0,  2000.0),
    vec3(-2000.0,  2000.0, -2000.0),
    vec3(-2000.0,  2000.0,  2000.0),

    // Top ace
    vec3(-2000.0,  2000.0,  2000.0),
    vec3( 2000.0,  2000.0,  2000.0),
    vec3( 2000.0, 2000.0, -2000.0),
    vec3(-2000.0, 2000.0, 2000.0),
    vec3( 2000.0, 2000.0, -2000.0),
    vec3(-2000.0, 2000.0, -2000.0),

    // Bottom ace
    vec3(-2000.0, -2000.0,  2000.0),
    vec3( 2000.0, -2000.0,  2000.0),
    vec3( 2000.0, -2000.0, -2000.0),
    vec3(-2000.0, -2000.0,  2000.0),
    vec3( 2000.0, -2000.0, -2000.0),
    vec3(-2000.0, -2000.0, -2000.0)
};


uniform mat4 view;
uniform mat4 projection;

void main()
{
    gl_Position = projection * view * vec4(vertices[gl_VertexID], 1.0);
}